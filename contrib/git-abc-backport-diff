#!/bin/bash
#SPDX-License-Identifier: MIT

cmd="git-abc-backport-diff"

SUBDIRECTORY_OK=true
USAGE="[-r <range>] [-u <upstream>] [-p] [-s <level>] [-S]"
LONG_USAGE="OPTIONS:
    -r git range
       optional; default is '\${ABC_DOWNSTREAM}..'
    -u upstream git tag / branch / id
       optional; default is '\$ABC_UPSTREAM'
    -p do not pause when viewing diffs
    -s sensitivity level of diff compares
       0:  only show functional code differences
       1:  show (0) + contextual differences
    -S summary only (no diff viewing)
    -h help

    You can set each of the default options using git-config:
      git config backport-diff.upstream
      git config backport-diff.range
      git config backport-diff.summary
"
. "$(git --exec-path)/git-sh-setup"
set_reflog_action abc-backport-diff

if ! command -v git-abc >/dev/null; then
	die "$cmd requires git-abc"
fi

do_summary()
{
	declare -i total count

	echo 'Key:'
	echo '[----] : patches are identical'
	echo '[####] : number of functional differences between upstream/downstream patch'
	echo '[down] : patch is downstream-only'
	echo 'The flags [FC] indicate (F)unctional and (C)ontextual differences, respectively'
	echo

	total=$(git rev-list --count $range)
	count=1

	git log --reverse --pretty='%h %s' $range | while read -r c subject; do
		[[ ${diff_functional[$c]} ]] || diff_functional[$c]=0
		[[ ${diff_contextual[$c]} ]] || diff_contextual[$c]=0

		if [[ ${diff_functional[$c]} != 0 ]]; then
			field1=$(printf "%04d" ${diff_functional[$c]})
		elif git notes --ref $ABC_NAMESPACE show $c 2>/dev/null | grep -q ABC_ONLY_DOWNSTREAM; then
			field1='down'
		else
			field1='----'
		fi

		if [[ ${diff_functional[$c]} != 0 ]] && [[ ${diff_contextual[$c]} != 0 ]]; then
			flags='FC'
		elif [[ ${diff_functional[$c]} != 0 ]]; then
			flags='F-'
		elif [[ ${diff_contextual[$c]} != 0 ]]; then
			flags='-C'
		else
			flags='--'
		fi

		if [[ $field1 == down ]]; then
			flags=""
		else
			flags=" [$flags]"
		fi

		printf "%03d/$total:[$field1]$flags '%s'\n" "$count" "$subject"
		((++count))
	done
}

do_diff()
{
	local level=$1 c

	if git range-diff |& grep -q 'not a git command'; then
		die "$cmd -s requires git-range-diff"
	fi

	for c in ${!upstream[*]}; do
		[[ ${diff_functional[$c]} ]] || diff_functional[$c]=0
		[[ ${diff_contextual[$c]} ]] || diff_contextual[$c]=0

		if (( ${diff_functional[$c]} == 0 && ${diff_contextual[$c]} == 0 )); then
			continue
		elif [[ $level == '0' ]] && (( ${diff_functional[$c]} == 0 )); then
			continue
		fi

		if [[ $no_pause ]]; then
			git range-diff ${c}^..${c} ${upstream[$c]}^..${upstream[$c]} | cat
		else
			git range-diff ${c}^..${c} ${upstream[$c]}^..${upstream[$c]}
			echo; read -p "press enter to continue" cont
		fi
	done
}

range=$(git config backport-diff.range || true)
upstream=$(git config backport-diff.upstream || true)
summary=$(git config backport-diff.summary || true)
while [[ $1 ]]; do
	case "$1" in
	-r)	range=$2; shift 2;;
	-u)	upstream=$2; shift 2;;
	-p)	no_pause=1; shift 1;;
	-s)	show_diff=$2; shift 2;;
	-S)	summary=y; shift;;
	*)	"$0" -h;;
	esac
done
if [[ -z $show_diff && -z $summary ]]; then
	summary=y
fi
if [[ ${range:(-2)} == '^!' ]]; then
	base=${range:0:(-1)}
	range="${base}..${range:0:(-2)}"
elif [[ $range ]]; then
	base=${range/..*/}
fi
if [[ $base ]] && [[ ! $upstream ]]; then
	upstream=$(git abc get-config | awk -F= '/^ABC_UPSTREAM=/ {print$2}')
	if [[ ! $upstream ]]; then
		die "No upstream known for base $base" >&2
	fi
fi

[[ -z $ABC_NAMESPACE ]] && tmp_namespace=y
git abc get-config $upstream $base -- >/dev/null || die "Failed to get git-abc config"
eval export $(git abc get-config $upstream $base --)
if [[ $tmp_namespace ]]; then
	export ABC_NAMESPACE="git-abc-$(mktemp -u XXXXXXXX)"
	export ABC_HUNT_CHERRIES=false
fi

if [[ ! $range ]]; then
	base=$ABC_DOWNSTREAM
	range="${base}.."
elif [[ ! $range =~ '..' ]]; then
	die "fatal: no .. in range: '$range'"
fi
if [[ ! $upstream ]]; then
	upstream=$ABC_UPSTREAM
fi

# FIXME: Need to improve the performance set-upstream-range with a specified upstream range,
#	 otherwise it's just not practical to use it. A workaround is to only run this in a
#	 git repo with the desired upstream available, as set-upstream-range will still complain
#	 when the upstream commits aren't valid.
#
# (Using commitGraph solves the performance problem, but git abc set-upstream-range has a bug
#  that needs fixing too.)
#
#upstream_range="$(git merge-base $base $upstream)..${upstream}"

if [[ $tmp_namespace ]]; then
	trap 'git abc reset -f; exit' EXIT HUP INT TERM
	git abc set-upstream-range $range $upstream_range 2>/dev/null
fi

declare -A diff_functional diff_contextual upstream
for c in $(git log --reverse --pretty='%h:%N' --notes=$ABC_NAMESPACE --grep ABC_UPSTREAM $range); do
	u=${c/*=/} c=${c/:*/}
	diff_lines=$(diff -u <(git diff $u^\!) <(git diff $c^\!) | awk '/^\+\+|^--|^\+-|^-\+|^\+ |^- |^ \+|^ -/ && !/^[\+\- ]?\+\+\+ |^[\+\- ]?--- / {print$0}')
	diff_functional[$c]=$(grep -c -e '^++' -e '^--' -e '^+-' -e '^-+' <<<"$diff_lines")
	diff_contextual[$c]=$(grep -c -e '^+ ' -e '^- ' -e '^ +' -e '^ -' <<<"$diff_lines")
	upstream[$c]=$u
done

if [[ $summary == y ]]; then
	do_summary
fi
if [[ $show_diff ]]; then
	do_diff $show_diff
fi
