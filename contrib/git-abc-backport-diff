#!/bin/bash
#SPDX-License-Identifier: MIT

cmd="git-abc-backport-diff"

# shellcheck disable=SC2034
{
SUBDIRECTORY_OK=true
USAGE="[-r <range>] [-u <upstream>] [-p] [-s <level>] [-S] [-n] [-- options...]"
LONG_USAGE="OPTIONS:
    -r git range
       optional; default is '\${ABC_DOWNSTREAM}..'
    -u upstream git tag / branch / id
       optional; default is '\$ABC_UPSTREAM'
    -p do not pause when viewing diffs
    -s sensitivity level of diff compares
       0:  only show functional code differences
       1:  show (0) + contextual differences
       2:  show all patches, regardless of any differences
    -S summary only (no diff viewing)
    -n do not show summary
    -h help

    You can set each of the default options using git-config:
      git config backport-diff.upstream
      git config backport-diff.range
      git config backport-diff.pause
      git config backport-diff.summary
      git config backport-diff.sensitivity

    Additionally, follow the backport-diff options with '-- options...'
    to pass 'options...' to git-range-diff
"
}
# shellcheck source=/dev/null
. "$(git --exec-path)/git-sh-setup"
set_reflog_action abc-backport-diff

if ! command -v git-abc >/dev/null; then
	die "$cmd requires git-abc"
fi

check_streams()
{
	local upstream=$1 downstream=$2
	ABC_UPSTREAM=$upstream ABC_DOWNSTREAM=$downstream git abc get-config -- >&/dev/null ||
		die "Please check that range and upstream are specified correctly"
}

abc_get_config()
{
	local upstream=$1 downstream=$2
	ABC_UPSTREAM=$upstream ABC_DOWNSTREAM=$downstream git abc get-config --
}

do_summary()
{
	declare -i idx=1
	local c subject field1 flags

	echo 'Key:'
	echo '[----] : patches are identical'
	echo '[####] : number of functional differences between upstream/downstream patch'
	echo '[down] : patch is downstream-only'
	echo 'The flags [FC] indicate (F)unctional and (C)ontextual differences, respectively'
	echo

	git log --reverse --pretty='%h %s' "$range" | while read -r c subject; do
		if [[ ${diff_functional[$c]} != 0 ]]; then
			field1=$(printf "%04d" "${diff_functional[$c]}")
		elif git notes --ref "$ABC_NAMESPACE" show "$c" 2>/dev/null | grep -q ABC_ONLY_DOWNSTREAM; then
			field1='down'
		else
			field1='----'
		fi

		if [[ ${diff_functional[$c]} != 0 ]] && [[ ${diff_contextual[$c]} != 0 ]]; then
			flags='FC'
		elif [[ ${diff_functional[$c]} != 0 ]]; then
			flags='F-'
		elif [[ ${diff_contextual[$c]} != 0 ]]; then
			flags='-C'
		else
			flags='--'
		fi

		if [[ $field1 == down ]]; then
			flags=""
		else
			flags=" [$flags]"
		fi

		printf "%03d/$total:[$field1]$flags '%s'\n" "$idx" "$subject"
		((++idx))
	done
}

do_diff()
{
	declare -i idx=1
	local c u patch

	if git range-diff |& grep -q 'not a git command'; then
		die "$cmd -s requires git-range-diff"
	fi

	for c in $(git log --reverse --pretty=%h "$range"); do
		patch=$(printf "%03d/$total" $idx)
		((++idx))

		u=${upstream_links[$c]}

		if [[ ! $u ]]; then
			continue
		elif (( sensitivity < 2 && ${diff_functional[$c]} == 0 && ${diff_contextual[$c]} == 0 )); then
			continue
		elif (( sensitivity < 1 && ${diff_functional[$c]} == 0 )); then
			continue
		fi

		if [[ $pause != false ]]; then
			echo; read -r -p "Press [Enter] to view $patch: $(git log -n1 --pretty=%s "$c")"
			git range-diff "${options[@]}" "${u}"^.."${u}" "${c}"^.."${c}"
		else
			echo; echo -n "$patch: "
			git range-diff "${options[@]}" "${u}"^.."${u}" "${c}"^.."${c}" | cat
		fi
	done
}

range=$(git config backport-diff.range || true)
upstream=$(git config backport-diff.upstream || true)
summary=$(git config --type bool backport-diff.summary || echo false)
pause=$(git config --type bool backport-diff.pause || echo true)
sensitivity=$(git config --type int backport-diff.sensitivity || echo 0)

while getopts ":hr:u:ps:SnN:" opt; do
	case "$opt" in
	r)	range=$OPTARG;;
	u)	upstream=$OPTARG;;
	p)	pause=false;;
	s)	sensitivity=$OPTARG
		if [[ ! "$sensitivity" =~ ^[0-2]$ ]]; then
			echo "Invalid argument for -s" >&2
			usage
		fi;;
	S)	summary=true;;
	n)	no_summary=true;;
	N)	namespace=$OPTARG;;
	h)	"$0" -h;;
	\?)	echo "Unknown option: -$OPTARG" >&2; usage;;
	esac
done
shift $((OPTIND - 1))
read -r -a options <<<"$@"

[[ $namespace ]] && export ABC_NAMESPACE=$namespace

if [[ ${range:(-2)} == '^!' ]]; then
	base=${range:0:(-1)}
	range="${base}..${range:0:(-2)}"
elif [[ $range && ! $range =~ \.\. ]]; then
	die "fatal: no .. in range: '$range'"
elif [[ $range ]]; then
	base=${range/..*/}
fi

check_streams "$upstream" "$base"

# shellcheck source=/dev/null
. <(abc_get_config "$upstream" "$base")
export ABC_NAMESPACE

if [[ ! $range ]]; then
	base=$ABC_DOWNSTREAM
	range="${base}.."
fi
if [[ ! $upstream ]]; then
	upstream=$ABC_UPSTREAM
fi

if [[ -z $namespace ]]; then
	ABC_NAMESPACE="git-abc-$(mktemp -u XXXXXXXX)"
	export ABC_NAMESPACE
	trap 'git abc reset -f; exit' EXIT HUP INT TERM

# FIXME: Need to improve the performance set-upstream-range with a specified upstream range,
#	 otherwise it's just not practical to use it. A workaround is to only run this in a
#	 git repo with the desired upstream available, as set-upstream-range will still complain
#	 when the upstream commits aren't valid.
#
# (Using commitGraph solves the performance problem, but git abc set-upstream-range has a bug
#  that needs fixing too.)
#
#	upstream_range="$(git merge-base "$base" "$upstream")..${upstream}"

	git -c abc.hunt-cherries=off abc set-upstream-range "$range" "$upstream_range" 2>/dev/null
fi

declare -A diff_functional diff_contextual upstream_links
declare -i total

total=$(git rev-list --count "$range")

for p in $(git log --pretty='%h:%N' --notes="$ABC_NAMESPACE" "$range"); do
	u=${p/*=/} c=${p/:*/}
	diff_functional[$c]=0
	diff_contextual[$c]=0

	if [[ $p =~ ABC_ONLY_DOWNSTREAM ]]; then
		continue
	elif [[ $p =~ ABC_CHERRYPICK ]]; then
		upstream_links[$c]=$u
		continue
	elif [[ ! $p =~ ABC_UPSTREAM ]]; then
		echo "Must set upstream links on $range of git-abc namespace $ABC_NAMESPACE first" >&2
		echo "Try git -c abc.namespace=$ABC_NAMESPACE abc set-upstream-range $range $upstream_range" >&2
		exit 1
	fi

	diff_lines=$(diff -u <(git diff "$u"^\!) <(git diff "$c"^\!) | awk '/^\+\+|^--|^\+-|^-\+|^\+ |^- |^ \+|^ -/ && !/^[\+\- ]?\+\+\+ |^[\+\- ]?--- / {print$0}')
	diff_functional[$c]=$(grep -c -e '^++' -e '^--' -e '^+-' -e '^-+' <<<"$diff_lines")
	diff_contextual[$c]=$(grep -c -e '^+ ' -e '^- ' -e '^ +' -e '^ -' <<<"$diff_lines")
	upstream_links[$c]=$u
done

[[ $no_summary != true ]] && do_summary
[[ $summary != true ]] && do_diff
